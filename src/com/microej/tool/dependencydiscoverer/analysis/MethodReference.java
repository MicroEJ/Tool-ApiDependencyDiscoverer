/*
 * Java
 *
 * Copyright 2021 MicroEJ Corp. All rights reserved.
 * This library is provided in source code for use, modification and test, subject to license terms.
 * Any modification of the source code will break MicroEJ Corp. warranties on the whole library.
 */
package com.microej.tool.dependencydiscoverer.analysis;

import org.eclipse.jdt.annotation.Nullable;

/**
 *
 */
public class MethodReference {

	private final String owner;
	private final String name;
	private final String descriptor;
	private final boolean isInterface;

	/**
	 * Instantiate a MethodReference object with the given parameters. In the same
	 * time instantiate {@link MethodReference#isInterface()} to the value
	 * {@code false}.
	 *
	 * @param owner      , type of the class containing the field
	 * @param name       of the method
	 * @param descriptor of the method, input and output in class file format
	 */
	public MethodReference(String owner, String name, String descriptor) {
		this.owner = owner;
		this.name = name;
		this.descriptor = descriptor;
		this.isInterface = false;
	}

	/**
	 * Instantiate a MethodReference object with the given parameters.
	 *
	 * @param owner       type of the class containing the field
	 * @param name        of the method
	 * @param descriptor  of the method, input and output in class file format
	 * @param isInterface if the method's owner class is an interface.
	 */
	public MethodReference(String owner, String name, String descriptor, boolean isInterface) {
		this.owner = owner;
		this.name = name;
		this.descriptor = descriptor;
		this.isInterface = isInterface;
	}


	/**
	 * Gets the owner.
	 *
	 * @return the owner.
	 */
	public String getOwner() {
		return owner;
	}

	/**
	 * Gets the name.
	 *
	 * @return the name.
	 */
	public String getName() {
		return name;
	}

	/**
	 * Gets the descriptor.
	 *
	 * @return the descriptor.
	 */
	public String getDescriptor() {
		return descriptor;
	}

	/**
	 * Gets the isInterface.
	 *
	 * @return the isInterface.
	 */
	public boolean isInterface() {
		return isInterface;
	}

	@Override
	public String toString() {
		return owner + "." + name + descriptor;
	}

	@Override
	public int hashCode() {
		// default hashcode implementation generated by Eclipse
		final int prime = 31;
		int result = 1;
		result = prime * result + descriptor.hashCode();
		result = prime * result + name.hashCode();
		result = prime * result + owner.hashCode();
		return result;
	}

	@Override
	public boolean equals(@Nullable Object obj) {
		// default equals implementation generated by Eclipse
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		MethodReference other = (MethodReference) obj;

		if (!descriptor.equals(other.descriptor)) {
			return false;
		}
		if (!name.equals(other.name)) {
			return false;
		}
		if (!owner.equals(other.owner)) {
			return false;
		}
		return true;
	}

}
